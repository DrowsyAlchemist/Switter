# docker-compose.override.yml
# Этот файл автоматически подхватывается docker-compose и добавляет настройки для РАЗРАБОТКИ
version: '3.8'

services:
  # 1. API Gateway - единая точка входа
  apigateway:
    build:
      context: .  # Сборка из корня проекта
      dockerfile: src/ApiGateway/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Logging:LogLevel:Default=Information
    ports:
      - "5000:80"  # Пробрасываем порт на хост для доступа с локальной машины
    volumes:
      - ./src/ApiGateway:/app  # Mount исходного кода для горячей перезагрузки
      - ~/.aspnet/https:/https:ro  # Для HTTPS сертификатов
    depends_on:
      - authservice
      - userservice
      - tweetservice
      - chatservice
    restart: unless-stopped

  # 2. Сервис аутентификации
  authservice:
    build:
      context: .
      dockerfile: src/AuthService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings:PostgreSQL=Host=postgres;Database=twitter_clone;Username=postgres;Password=password
      - Redis:ConnectionString=redis:6379
      - Jwt:Secret=YourSuperSecretKeyForDevelopmentOnlyChangeInProduction
      - Jwt:Issuer=twitter-clone-dev
      - Jwt:Audience=twitter-clone-dev
    ports:
      - "5001:80"
    volumes:
      - ./src/AuthService:/app
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # 3. Сервис пользователей
  userservice:
    build:
      context: .
      dockerfile: src/UserService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings:PostgreSQL=Host=postgres;Database=twitter_clone;Username=postgres;Password=password
      - Redis:ConnectionString=redis:6379
      - Kafka:BootstrapServers=kafka:9092
    ports:
      - "5002:80"
    volumes:
      - ./src/UserService:/app
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped

  # 4. Сервис твитов
  tweetservice:
    build:
      context: .
      dockerfile: src/TweetService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings:PostgreSQL=Host=postgres;Database=twitter_clone;Username=postgres;Password=password
      - Redis:ConnectionString=redis:6379
      - Kafka:BootstrapServers=kafka:9092
    ports:
      - "5003:80"
    volumes:
      - ./src/TweetService:/app
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped

  # 5. Сервис ленты новостей
  feedservice:
    build:
      context: .
      dockerfile: src/FeedService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Redis:ConnectionString=redis:6379
      - Kafka:BootstrapServers=kafka:9092
    ports:
      - "5004:80"
    volumes:
      - ./src/FeedService:/app
    depends_on:
      - redis
      - kafka
    restart: unless-stopped

  # 6. Сервис чата
  chatservice:
    build:
      context: .
      dockerfile: src/ChatService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings:PostgreSQL=Host=postgres;Database=twitter_clone;Username=postgres;Password=password
      - Redis:ConnectionString=redis:6379,allowAdmin=true
      - Kafka:BootstrapServers=kafka:9092
    ports:
      - "5005:80"
      - "5006:5006"  # Для SignalR WebSocket соединений
    volumes:
      - ./src/ChatService:/app
    depends_on:
      - postgres
      - redis
      - kafka
    restart: unless-stopped

  # 7. Сервис уведомлений
  notificationservice:
    build:
      context: .
      dockerfile: src/NotificationService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - Redis:ConnectionString=redis:6379
      - Kafka:BootstrapServers=kafka:9092
    ports:
      - "5007:80"
    volumes:
      - ./src/NotificationService:/app
    depends_on:
      - redis
      - kafka
    restart: unless-stopped

  # 8. Настройки для PostgreSQL (разработка)
  postgres:
    environment:
      - POSTGRES_DB=twitter_clone
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_HOST_AUTH_METHOD=trust  # Упрощаем доступ в разработке
    ports:
      - "5432:5432"  # Пробрасываем порт для подключения из IDE
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100  # Увеличиваем лимит для разработки

  # 9. Настройки для Redis (разработка)
  redis:
    command: >
      redis-server
      --appendonly yes  # Включаем persistence
      --maxmemory 256mb  # Лимит памяти
      --maxmemory-policy allkeys-lru  # Политика вытеснения
    ports:
      - "6379:6379"

  # 10. Настройки для Kafka (разработка)
  kafka:
    environment:
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_DELETE_TOPIC_ENABLE=true
      - KAFKA_NUM_PARTITIONS=3  # Увеличиваем партиции для разработки
    ports:
      - "9092:9092"
      - "9093:9093"

  # 11. Seq для логов (опционально, но очень полезно)
  seq:
    environment:
      - ACCEPT_EULA=Y
      - SEQ_FIRSTRUN_ADMINUSERNAME=admin
      - SEQ_FIRSTRUN_ADMINPASSWORDHASH=  # Оставляем пустым для разработки
    ports:
      - "5341:5341"   # Web UI
      - "5342:5342"   # Ingestion port